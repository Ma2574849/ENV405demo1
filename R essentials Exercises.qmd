---
title: "R essentials: Exercises"
author: "[Dr. Peng Zhao](https://connect.xjtlu.edu.cn/user/pengzhao) (&#9993; peng.zhao@xjtlu.edu.cn)"
format: html
toc: true
number-sections: true
self-contained: true
fig-width: 6
fig-height: 4.5
fig.align: 'center'
out.width: "100%"
warning: false
message: false
---

# Simple calculation

1.  Calculate `1 + 2 + 3 + ... + 100` with R.
```{r}
result <- sum(1:100)
print(result)
```
2.  $y=e^{ax}+b$ , $a=3.2$, $b=98$. Calculate the y values when $x=0.2, 2, 20, 200$ with R.
```{r}
a <- 3.2
b <- 98
x_values <- c(0.2, 2, 20, 200)
y_values <- exp(a * x_values) + b
results <- data.frame(x = x_values, y = y_values)
print(results)

```         
3.  In the addition problem below, find the digit that represented by z. Each time a letter appears it represents the same digit. x≠0.
  xy
  xy
  xy
+ xy
-----
  zx
```{r}
# Iterate over possible digits for x, y, z
for (x in 1:9) {  # x ≠ 0
  for (y in 0:9) {
    for (z in 0:9) {
      left_side <- 4 * (10*x + y)
      right_side <- 10*z + x
      if (left_side == right_side) {
        cat("x =", x, ", y =", y, ", z =", z, "\n")
        cat("4*(10*", x, "+", y, ") =", left_side, "\n")
        cat("10*", z, "+", x, "=", right_side, "\n")
      }
    }
  }
}
```


# Air quality

The New York Air Quality dataset (the data file ***airquality.csv***.) shows daily air quality measurements in New York, May to September 1973. The measurements include mean ozone in parts per billion from 1300 to 1500 hours at Roosevelt Island, solar radiation in Langleys in the frequency band 4000–7700 Angstroms from 0800 to 1200 hours at Central Park, average wind speed in miles per hour at 0700 and 1000 hours at LaGuardia Airport, maximum daily temperature in degrees Fahrenheit at La Guardia Airport.

1.  Import airquality.csv into R.
```{r}
# Import airquality.csv into R
df_aq <- read.csv('data/airquality.csv')
summary(df_aq)
```

2.  How many rows and columns does this data frame have?
```{r}
# Import the airquality.csv file
airquality <- read.csv('data/airquality.csv')

# Calculate the number of rows and columns
num_rows <- nrow(airquality)
num_cols <- ncol(airquality)

# Display the results
cat("Number of rows:", num_rows, "\n")
cat("Number of columns:", num_cols, "\n")
```

3.  What was the temperature on June 22?
```{r}
# Import the airquality.csv file
airquality <- read.csv('data/airquality.csv')

# Filter for June 22 (Month = 6, Day = 22)
june_22_temp <- airquality$Temp[airquality$Month == 6 & airquality$Day == 22]

# Display the temperature
cat("Temperature on June 22:", june_22_temp, "°F\n")
```

4.  What was the mean ozone concentration (ppb) in June?
```{r}
# Import the airquality.csv file
airquality <- read.csv('data/airquality.csv')

# Filter for June data (Month = 6)
june_data <- airquality[airquality$Month == 6, ]

# Calculate mean ozone concentration, removing NA values
mean_ozone_june <- mean(june_data$Ozone, na.rm = TRUE)

# Display the result
cat("Mean ozone concentration in June:", round(mean_ozone_june, 2), "ppb\n")
```

5.  What was the mean, maximum, minimum, median of the wind speed in the whole dataset?
```{r}
# Import the airquality.csv file
airquality <- read.csv('data/airquality.csv')

# Calculate summary statistics for wind speed
wind_summary <- summary(airquality$Wind)

# Extract specific statistics
mean_wind <- mean(airquality$Wind, na.rm = TRUE)
max_wind <- max(airquality$Wind, na.rm = TRUE)
min_wind <- min(airquality$Wind, na.rm = TRUE)
median_wind <- median(airquality$Wind, na.rm = TRUE)

# Display the results
cat("Wind Speed Statistics:\n")
cat("=====================\n")
cat("Mean wind speed:   ", round(mean_wind, 2), "mph\n")
cat("Maximum wind speed:", round(max_wind, 2), "mph\n")
cat("Minimum wind speed:", round(min_wind, 2), "mph\n")
cat("Median wind speed: ", round(median_wind, 2), "mph\n")
```

6.  The temperature in the dataset was given in °F. Add a new column for the temperature in °C.
```{r}
# Import the airquality.csv file
airquality <- read.csv('data/airquality.csv')

# Add new column for temperature in Celsius using the conversion formula
airquality$Temp_C <- round((airquality$Temp - 32) * 5/9, 1)

# View the entire dataset with the new column
print(airquality)

```

7.  Save the data frame as a .csv file.
```{r}
# Read the CSV file
airquality <- read.csv('data/airquality.csv')

# Add new column for temperature in Celsius
airquality$Temp_C <- round((airquality$Temp - 32) * 5/9, 1)

# Save the modified dataframe as a new CSV file
write.csv(airquality, "airquality2.csv", row.names = FALSE)
```

8.  Summarize the dataset with common statistics for each variable.
```{r}
# Load dataset
data <- read.csv('data/airquality.csv')

# Select only Ozone, Solar.R, Wind, Temp
selected_data <- data[, c("Ozone", "Solar.R", "Wind", "Temp")]

# Calculate basic statistics for each variable
cat("=== BASIC STATISTICS SUMMARY ===\n\n")

# Create statistics calculation function
calculate_stats <- function(x, var_name) {
  data.frame(
    Variable = var_name,
    Mean = round(mean(x, na.rm = TRUE), 2),
    Maximum = max(x, na.rm = TRUE),
    Minimum = min(x, na.rm = TRUE),
    Median = round(median(x, na.rm = TRUE), 2),
    stringsAsFactors = FALSE
  )
}

# Apply function to each variable
stats_list <- lapply(names(selected_data), function(col) {
  calculate_stats(selected_data[[col]], col)
})

# Combine results
stats_df <- do.call(rbind, stats_list)

# Print formatted results
print(stats_df)
cat("\n")
```

9.  Make a scatter plot with two numeric variables, and add a linear fitted line.
```{r}
# Load the dataset
airquality <- read.csv('data/airquality.csv')

# Create scatter plot with linear fitted line
plot(airquality$Temp, airquality$Ozone, 
     main = "Temperature vs Ozone Levels",
     xlab = "Temperature (°F)", 
     ylab = "Ozone (ppb)",
     pch = 16, 
     col = "blue")

# Add linear regression line
abline(lm(Ozone ~ Temp, data = airquality), 
       col = "red", 
       lwd = 2)

# Add grid for better readability
grid()

# Add legend
legend("topleft", 
       legend = c("Data points", "Linear fit"),
       col = c("blue", "red"),
       pch = c(16, NA),
       lty = c(NA, 1),
       lwd = c(NA, 2))
```

# Iris

Load the built-in dataset `data(iris)`.

1.  Insert a column named `petal_length_level` in the iris data, showing whether the petal length is greater than 4 (Two values in this column: "\< 4", "\>= 4").
```{r}
# Read the data
iris_data <- read.csv("data/data(iris).csv")
# Add petal_length_level column based on Petal.Length
iris_data$petal_length_level <- ifelse(iris_data$Petal.Length >= 4, ">= 4", "< 4")
# Display all data
options(max.print = 200)
print(iris_data)
```

2.  Insert a column named `sepal_width_level` in the iris data, showing whether the sepal width is greater or smaller than 3 (Three values in this column: "\< 3", "= 3", "\> 3").
```{r}
# Read the data
iris_data <- read.csv("data/data(iris).csv")
# Add sepal_width_level column with three categories
iris_data$sepal_width_level <- ifelse(iris_data$Sepal.Width < 3, "< 3",
                                     ifelse(iris_data$Sepal.Width == 3, "= 3", "> 3"))
# Display all data
print(iris_data)
```

3.  Use the loop function: cut the iris data frame into three data frames based on the three kinds of iris species, and save each of them in a `.csv` file.
```{r}
# Read the data
iris_data <- read.csv("data/data(iris).csv")

# Get unique species names
species_list <- unique(iris_data$Species)

# Loop through each species
for(species in species_list) {
  # Create subset for current species
  species_df <- iris_data[iris_data$Species == species, ]
  
  # Create filename
  filename <- paste0(gsub("[^a-zA-Z]", "", species), "_data.csv")
  
  # Save as CSV file
  write.csv(species_df, file = filename, row.names = FALSE)
  
  # Print confirmation message
  cat("Saved", nrow(species_df), "rows of", species, "to", filename, "\n")
}

```

# Your own data

Import your own data into R as a data frame. Summarize the dataset. Make a scatter plot with two numeric variables, and add a linear fitted line.
```{r}
# Load required packages
library(readxl)
library(ggplot2)
library(dplyr)

# Read the data
data <- read_excel("data/vehicle ownership and emissions.xlsx", sheet = "Sheet1")

# View complete dataset
cat("=== COMPLETE DATASET ===\n")
print(data)
cat("\n")

# View dataset structure
cat("=== DATASET STRUCTURE ===\n")
str(data)
cat("\n")

# Basic statistical summary
cat("=== BASIC STATISTICAL SUMMARY ===\n")
summary(data)
cat("\n")

# Rename columns (remove special characters)
colnames(data) <- c("Year", "Vehicle", "CO_emissions", "HC_emissions", "NOx_emissions", "PM_emissions")

# Create scatter plot: Year vs PM_emissions with linear fit
ggplot(data, aes(x = Year, y = PM_emissions)) +
  geom_point(size = 4, color = "blue", alpha = 0.7) +
  geom_smooth(method = "lm", se = TRUE, color = "red", linetype = "dashed", fill = "pink", alpha = 0.2) +
  labs(
    title = "Scatter Plot: Year vs PM_emissions (2014-2023)",
    subtitle = "With linear fitted line and confidence interval",
    x = "Year",
    y = "PM_emissions (10,000 tons)",
    caption = "Data source: vehicle ownership and emissions.xlsx"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5, size = 12),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  ) +
  # Add value labels
  geom_text(aes(label = PM_emissions), vjust = -1.0, hjust = 0.5, size = 3.5, color = "darkgreen") +
  scale_x_continuous(breaks = seq(2014, 2023, 1))

```

